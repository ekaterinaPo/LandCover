name: CI/CD Pipeline - Model Training

on:
  push:
    branches:
      - not main

env:
  IMAGE_NAME: landcover-train
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_URI_TRAIN: ${{ secrets.ECR_URI_TRAIN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  INSTANCE_IP: ${{ secrets.INSTANCE_IP }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  INSTANCE_ID: ${{secrets.INSTANCE_ID}}

jobs:
  build-and-push:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region $AWS_REGION

      - name: Login to AWS ECR
        run: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URI_TRAIN

      - name: Build Docker image
        run: docker build -t $IMAGE_NAME .

      - name: Tag Docker image
        run: docker tag $IMAGE_NAME:latest $ECR_URI_TRAIN:latest

      - name: Push Docker image to AWS ECR
        run: docker push $ECR_URI_TRAIN:latest

      - name: Deploy Docker image to EC2
        run: |
          sudo apt-get update && sudo apt-get install -y openssh-client
          mkdir -p ~/.ssh
          echo -e "${{ secrets.SSH_PRIVATE_KEY }}" >> ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

          ssh -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID"
          ssh -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
          ssh -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "aws configure set default.region $AWS_REGION"
          
          ssh -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URI_TRAIN"

          ssh -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "docker pull $ECR_URI_TRAIN:latest"
          ssh -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "docker run -d $ECR_URI_TRAIN:latest"